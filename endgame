#!/bin/python3

#todo: 
#make files if no file ?
#pop empty list

import json
import sys
import datetime

def main():
    args = sys.argv
    if args[1] in arguments:
        arguments[args[1]]["run"](args)
    else:
        print('Try "endgame help" for a list of arguments.')

#ARGUMENTS
def helpCmd(args):
    print("Arguments:")
    print(formatDict(formatCmdInfo, arguments))

def setupCmd(args):
    print("Please enter a 3 rep max that is a bit bellow what you think your current 3RM is.")
    print("Chin up 3RM is bodyweight + weight on your belt.")
    lifts = [('Squat', 2.5), ('Deadlift', 2.5), ('Press', 1.25), ('Bench', 1.25), ('Chins', 1.25), ('Rows', 1.25)]
    stats = {
        "bodyweight": getPosFloatInput("Bodyweight: "),
        "lifts": {
            lift: {
                "3RM": roundToNearest(getPosFloatInput(f"{lift} 3RM: "), progression),
                "progression": progression,
                "sessions": 1
            }
            for lift, progression in lifts
        }
    }
    writeFile(stats, 'stats.json')
    print('Your stats are set up.')
    print('"endgame next" to view your first workout.')

def rmCmd(args):
    if not isSetup(): return
    removed = removeLog()
    progressLifts(removed, -1)
    print('Removed: \n' + formatLog(removed))

def addCmd(args):
    if not isSetup(): return
    nextLog = getNextLog()
    print('Added: \n' + formatLog(nextLog))
    appendLogs(nextLog)
    progressLifts(nextLog, 1)

def listCmd(args):
    if not isSetup(): return
    try:    amount = int(args[2])
    except: amount = 1
    print(formatList(formatLog, lastLogs(amount)))

def statsCmd(args):
    if not isSetup(): return
    print(formatDict(formatLift3RM, readFile('stats.json')["lifts"]))

def liftsCmd(args):
    print(formatDict(formatSessionsOfLift, sessionsOfLifts))

def nextCmd(args):
    if not isSetup(): return
    print(formatLog(getNextLog()))

def failCmd(args):
    if not isSetup(): return
    while True:
        lastLog = logNr(1)
        print(formatLog(lastLog))
        inp = input("Type the lift's name (ex. Squat), to fail/unfail it.\nEnter blank to exit.\n-")
        if inp == "": return
        elif inp in PRLifts(lastLog['lifts']):
            toggleFailLift(inp)

    lastLog = lastLogs(2)[0]
def testCmd(args):
    return

arguments = {
    "help": {
        "run": helpCmd,
        "description": "Print this message."
    },
    "setup": {
        "run": setupCmd,
        "description": "Set up your current 3RMs"
    },
    "rm": {
        "run": rmCmd,
        "description": "Remove the latest log entry."
    },
    "add": {
        "run": addCmd,
        "description": "Add the next log."
    },
    "list": {
        "run": listCmd,
        "description": "List the latest log entry. Can take <entries> argument for more entries."
    },
    "stats": {
        "run": statsCmd,
        "description": "Prints your current 3 rep maxes."
    },
    "lifts": {
        "run": liftsCmd,
        "description": "Prints the program sessions for each lift."
    },
    "next": {
        "run": nextCmd,
        "description": "Shows the next training day."
    },
    "fail": {
        "run": failCmd,
        "description": "Mark PR sets from last log as failed."
    },
    "test": {
        "run": testCmd,
        "description": "h" #hh
    },
}

#JSON
def writeFile(data, file="logs.json"):
    with open(file, 'w') as f:
        json.dump(data, f, indent=2)

def readFile(file="logs.json"):
    with open(file) as f:
        return json.loads(f.read())

def appendLogs(data):
    logs = readFile()
    logs.append(data)
    writeFile(logs)

def removeLog():
    logs = readFile()
    removed = logs.pop()
    writeFile(logs)
    return removed
    
def lastLogs(amount):
    logs = readFile()
    i = amount if amount < len(logs) else len(logs)
    return logs[-i:]

def logNr(nr):
    return lastLogs(nr)[0]

#FORMATING
def formatList(formatFunc, li):
    return "\n".join([formatFunc(el) for el in li])

def formatDict(formatFunc, dic):
    return "\n".join([formatFunc(key, value) for key, value in dic.items()])

def formatLift3RM(lift, stats):
    return f"{lift} 3RM: {stats['3RM']}kg"

def formatLog(log):
    return f"{log['date']}:\n{formatDict(formatLogLift, log['lifts'])}"

def formatLogLift(lift, stats):
    return f"{stats['type']} {lift}: {stats['weight']}kg {sessionOutOfSessions(stats['session'], lift)} {'FAIL' if stats['isFail'] else ''}"

def sessionOutOfSessions(session, lift):
    return f"{session}/{readFile('stats.json')['lifts'][lift]['sessions']}"

def formatSessionsOfLift(lift, sessions):
    return f"{lift}:\n{formatDict(formatSession, sessions)}"

def formatSession(name, block):
    return f"   {name}:\n{formatList(formatBlock, block)}"

def formatBlock(block):
    return f"       {block[0]}x{block[1]} {block[2]}% of 3RM"

def formatCmdInfo(cmd, info):
    return f"   {(cmd+':').ljust(longestCmdName() + 5)}{info['description']}"

#PROGRAM STRUCTURE
sessionsOfLifts = {
    "Squat": {
        "Volume": [[3,5,87]],
        "PR":     [[1,3,100],[1,5,87]]
    },
    "Deadlift": {
        "Volume": [[1,5,87]],
        "PR":     [[1,3,100],[1,4,87]]
    },
    "Press": {
        "Volume": [[2,3,100]],
        "PR":     [[2,3,100]]
    },
    "Bench": {
        "Volume": [[3,5,87]],
        "PR":     [[1,3,100],[1,5,87]]
    },
    "Chins": {
        "Volume": [[3,5,87]],
        "PR":     [[1,3,100],[1,5,87]]
    },
    "Rows": {
        "Volume": [[3,5,87]],
        "PR":     [[1,3,100],[1,5,87]]
    }
}

movementTypes = {
             #Day A    Day B
    "Legs": ["Squat", "Deadlift"],
    "Push": ["Bench", "Press"],
    "Pull": ["Chins", "Rows"]
}

def firstLogs(amountOfLogs):
    return {
        "date": datetime.datetime.now().strftime('%x'),
        "lifts": {
            movementType[amountOfLogs]: {
                "type": "PR",
                "weight": nextWeight("PR", movementType[amountOfLogs]),
                "isFail": False,
                "session": 1
            }
            for movementType in movementTypes.values()
        }
    }

def isSetup():
    if len(readFile('stats.json')) == 0:
        print('Try "endgame setup" to get going.')
        return False
    return True

def getPosFloatInput(prompt):
    try:
        ret = float(input(prompt))
        return ret if ret >= 0 else getPosFloatInput(prompt)
    except:
        return getPosFloatInput(prompt)

def nextTrainingSession(previous):
    return {
        "date": datetime.datetime.now().strftime('%x'),
        "lifts": nextLifts(previous["lifts"])
    }

def nextLifts(previousLifts):
    return {lift: nextLiftStats(lift, stats) for lift, stats in previousLifts.items()}

def nextLiftStats(name, previousLift):
    typ = nextType(name, previousLift)
    return {
        "type": typ,
        "weight": nextWeight(typ, name),
        "isFail": False,
        "session": nextSession(typ, previousLift["session"])
    }

def getNextLog():
    amountOfLogs = len(readFile('logs.json'))
    return firstLogs(amountOfLogs) if amountOfLogs < 2 else nextTrainingSession(logNr(2))

def rmOfLift(lift):
    return readFile('stats.json')["lifts"][lift]['3RM']

def progressionOfLift(lift):
    return readFile('stats.json')["lifts"][lift]['progression']

def nextType(name, previousLift):
    total = readFile('stats.json')["lifts"][name]["sessions"]
    current = previousLift["session"]
    return "PR" if total == current else "Volume"

def nextWeight(typ, name):
    RM = rmOfLift(name)
    percent = sessionsOfLifts[name][typ][0][2]
    progression = progressionOfLift(name)
    weight = roundToNearest(RM * percent / 100, progression)
    return weight if typ == "Volume" else weight + progression

def nextSession(typ, session):
    return 1 if typ == "PR" else session + 1

def PRLifts(lifts):
    return [lift for lift in lifts if lifts[lift]["type"] == "PR"]

def toggleFailLift(lift):
    log = removeLog()
    log['lifts'][lift]['isFail'] = not log['lifts'][lift]['isFail']
    direction = 1 if log['lifts'][lift]['isFail'] else -1
    progressLift(lift, -2*direction)
    addSessions(lift, direction)
    appendLogs(log)

def progressLift(lift, progressions):
    stats = readFile('stats.json')
    stats['lifts'][lift]['3RM'] += progressionOfLift(lift)*progressions
    writeFile(stats, 'stats.json')

def progressLifts(log, progressions):
    for lift in PRLifts(log['lifts']):
       progressLift(lift, progressions) 

def addSessions(lift, sessions):
    stats = readFile('stats.json')
    stats['lifts'][lift]['sessions'] += sessions
    writeFile(stats, 'stats.json')

#MISC
def longestCmdName():
    return max([len(cmdName) for cmdName in arguments])

def roundToNearest(num, to): #positive
    ret = 0
    while ret < num:
        ret += to
    return ret if ret-num < num-ret+to else ret-to #round up or down

#
if __name__ == "__main__": main()
