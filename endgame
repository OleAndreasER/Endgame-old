#!/bin/python3

import json
import sys

def main():
    args = sys.argv
    
    arguments[args[1]]["run"](args)
    #print('Try "endgame help" for a list of arguments')

#ARGUMENTS
def helpCmd(args):
    print("Arguments:")
    print(formatDict(formatCmdInfo, arguments))

def rmCmd(args):
    removed = removeLog()
    print('removed', removed)

def addCmd(args):
    appendLogs({"test":"srntdeai"})
    print('added')

def listCmd(args):
    print(formatList(formatLog, lastLogs(args)))

def statsCmd(args):
    print(formatDict(formatLift3RM, readLogs('stats.json')["lifts"]))

def liftsCmd(args):
    print(formatDict(formatSessionsOfLift, sessionsOfLifts))

arguments = {
    "help": {
        "run": helpCmd,
        "description": "Print this message."
    },
    "rm": {
        "run": rmCmd,
        "description": "Remove the latest log entry."
    },
    "add": {
        "run": addCmd,
        "description": "Add the next log." #hh
    },
    "list": {
        "run": listCmd,
        "description": "List the latest log entry. Can take <entries> argument for more entries."
    },
    "stats": {
        "run": statsCmd,
        "description": "Prints your current 3 rep maxes."
    },
    "lifts": {
        "run": liftsCmd,
        "description": "Prints the program sessions for each lift."
    },
}

#JSON
def writeLogs(data):
    with open('logs.json', 'w') as f:
        json.dump(data, f, indent=2)

def readLogs(file="logs.json"):
    with open(file) as f:
        return json.loads(f.read())

def appendLogs(data):
    logs = readLogs()
    logs.append(data)
    writeLogs(logs)

def removeLog():
    logs = readLogs()
    removed = logs.pop()
    writeLogs(logs)
    return removed
    
def lastLogs(args):
    try:    amount = args[2]
    except: amount = 1

    logs = readLogs()
    i = int(amount)
    if len(logs) < i:
        return "There aren't that many logs"
    return logs[-i:]

#FORMATING
def formatList(formatFunc, li):
    return "\n".join([formatFunc(el) for el in li])

def formatDict(formatFunc, dic):
    return "\n".join([formatFunc(key, dic[key]) for key in dic.keys()])

def formatLift3RM(lift, stats):
    return f"{lift} 3RM: {stats['3RM']}kg"

def formatLog(log):
    return f"{log['date']}:\n{formatDict(formatLogLift, log['lifts'])}"

def formatLogLift(lift, stats):
    return f"{stats['type']} {lift}: {stats['weight']}kg"

def formatSessionsOfLift(lift, sessions):
    return f"{lift}:\n{formatList(formatSession, sessions)}"

def formatSession(session):
    return f"   {session['type']}:\n{formatList(formatBlock, session['blocks'])}"

def formatBlock(block):
    return f"       {block[0]}x{block[1]} {block[2]}% of 3RM"

def formatCmdInfo(cmd, info):
    return f"   {(cmd+':').ljust(longestCmdName() + 5)}{info['description']}"

#PROGRAM STRUCTURE
def session(typ,blocks):
    return {
        "type": typ,
        "blocks": blocks #[[sets, reps, % of 3RM],]
    }

sessionsOfLifts = {
    "Squat": [
        session("Volume",[[3,5,87]]),
        session("PR",[[1,3,100],[1,5,87]]),
    ],
    "Deadlift": [
        session("Volume",[[1,3,100]]),
        session("PR",[[1,3,100],[1,4,87]]),
    ],
    "Press": [
        session("Volume",[[2,3,100]]),
        session("PR",[[2,3,100]]),
    ],
    "Bench": [
        session("Volume",[[1,3,100]]),
        session("PR",[[1,3,100],[1,5,87]]),
    ],
    "Chins": [
        session("Volume",[[1,3,100]]),
        session("PR",[[1,3,100],[1,5,87]]),
    ],
    "Rows": [
        session("Volume",[[1,3,100]]),
        session("PR",[[1,3,100],[1,5,87]])
    ]
}

movementTypes = {
             #Day A ,  Day B,
    "Legs": ["Squat", "Deadlift"],
    "Push": ["Press", "Bench"],
    "Pull": ["Chins", "Rows"]
}

#



#MICS
def longestCmdName():
    return max([len(cmdName) for cmdName in arguments.keys()])

#
if __name__ == "__main__": main()
