#!/bin/python3

import json
import sys

def main():
    args = sys.argv
    
    arguments[args[1]]["run"](args)
    #print('Try "endgame help" for a list of arguments')

#ARGUMENTS
def helpCmd(args):
    print("Arguments:")
    print(formatDict(formatCmdInfo, arguments))

def rmCmd(args):
    removed = removeLog()
    print('removed', removed)

def addCmd(args):
    appendLogs({})
    print('added')

def listCmd(args):
    print(formatList(formatLog, lastLogs(args)))

def statsCmd(args):
    print(formatDict(formatLift3RM, readLogs('stats.json')["lifts"]))

def liftsCmd(args):
    print(formatDict(formatSessionsOfLift, sessionsOfLifts))

def nextCmd(args):
    print(formatLog(nextTrainingSession(lastLogs([])[0])))

def testCmd(args):
    print(roundToNearest(101, 2.5))
    print(roundToNearest(102, 2.5))
    print(roundToNearest(103, 2.5))

arguments = {
    "help": {
        "run": helpCmd,
        "description": "Print this message."
    },
    "rm": {
        "run": rmCmd,
        "description": "Remove the latest log entry."
    },
    "add": {
        "run": addCmd,
        "description": "Add the next log." #hh
    },
    "list": {
        "run": listCmd,
        "description": "List the latest log entry. Can take <entries> argument for more entries."
    },
    "stats": {
        "run": statsCmd,
        "description": "Prints your current 3 rep maxes."
    },
    "lifts": {
        "run": liftsCmd,
        "description": "Prints the program sessions for each lift."
    },
    "test": {
        "run": testCmd,
        "description": "h" #hh
    },
    "next": {
        "run": nextCmd,
        "description": "h" #hh
    }
}

#JSON
def writeLogs(data):
    with open('logs.json', 'w') as f:
        json.dump(data, f, indent=2)

def readLogs(file="logs.json"):
    with open(file) as f:
        return json.loads(f.read())

def appendLogs(data):
    logs = readLogs()
    logs.append(data)
    writeLogs(logs)

def removeLog():
    logs = readLogs()
    removed = logs.pop()
    writeLogs(logs)
    return removed
    
def lastLogs(args):
    try:    amount = args[2]
    except: amount = 1

    logs = readLogs()
    i = int(amount)
    if len(logs) < i:
        return "There aren't that many logs"
    return logs[-i:]

#FORMATING
def formatList(formatFunc, li):
    return "\n".join([formatFunc(el) for el in li])

def formatDict(formatFunc, dic):
    return "\n".join([formatFunc(key, value) for key, value in dic.items()])

def formatLift3RM(lift, stats):
    return f"{lift} 3RM: {stats['3RM']}kg"

def formatLog(log):
    return f"{log['date']}:\n{formatDict(formatLogLift, log['lifts'])}"

def formatLogLift(lift, stats):
    return f"{stats['type']} {lift}: {stats['weight']}kg"

def formatSessionsOfLift(lift, sessions):
    return f"{lift}:\n{formatDict(formatSession, sessions)}"

def formatSession(name, block):
    return f"   {name}:\n{formatList(formatBlock, block)}"

def formatBlock(block):
    return f"       {block[0]}x{block[1]} {block[2]}% of 3RM"

def formatCmdInfo(cmd, info):
    return f"   {(cmd+':').ljust(longestCmdName() + 5)}{info['description']}"

#PROGRAM STRUCTURE
def session(typ,blocks):
    return {
        "type": typ,
        "blocks": blocks #[[sets, reps, % of 3RM],]
    }

sessionsOfLifts = {
    "Squat": {
        "Volume": [[3,5,87]],
        "PR":     [[1,3,100],[1,5,87]]
    },
    "Deadlift": {
        "Volume": [[1,3,100]],
        "PR":     [[1,3,100],[1,4,87]]
    },
    "Press": {
        "Volume": [[2,3,100]],
        "PR":     [[2,3,100]]
    },
    "Bench": {
        "Volume": [[1,3,100]],
        "PR":     [[1,3,100],[1,5,87]]
    },
    "Chins": {
        "Volume": [[1,3,100]],
        "PR":     [[1,3,100],[1,5,87]]
    },
    "Rows": {
        "Volume": [[1,3,100]],
        "PR":     [[1,3,100],[1,5,87]]
    }
}

movementTypes = {
             #Day A    Day B
    "Legs": ["Squat", "Deadlift"],
    "Push": ["Press", "Bench"],
    "Pull": ["Chins", "Rows"]
}

#

def nextTrainingSession(previous):
    return {
        "date": "a date",
        "lifts": nextLifts(previous["lifts"])
    }

def nextLifts(previousLifts):
    return {lift: nextLiftStats(lift, stats) for lift, stats in previousLifts.items()}

def nextLiftStats(name, previousLift):
    typ = nextType(previousLift)
    return {
        "type": typ,
        "weight": nextWeight(typ, previousLift["weight"], name),
        "isFail": False,
        "volumeSetNr": nextVolumeSetNr(previousLift["volumeSetNr"])
    }

def nextType(previousLift):
    return "Volume"

def nextWeight(typ, weight, name):
    RM = readLogs('stats.json')["lifts"][name]["3RM"]
    percent = sessionsOfLifts[name][typ][0][2]
    to = readLogs('stats.json')["lifts"][name]['progression']
    return roundToNearest(RM * percent / 100, to)

def nextVolumeSetNr(previousVolumeSetNr):
    return None

#MICS
def longestCmdName():
    return max([len(cmdName) for cmdName in arguments.keys()])

def roundToNearest(num, to): #positive
    ret = 0
    while ret < num:
        ret += to
    return ret if ret-num < num-ret+to else ret-to #round up or down

#
if __name__ == "__main__": main()
